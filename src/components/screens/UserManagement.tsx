import React, { useState, useEffect } from 'react';
import { ArrowLeft, Search, Filter, Users, Mail, Calendar, User, MoreVertical, Edit, Trash2, Eye, Send, XCircle } from 'lucide-react';

interface User {
  id: number;
  email: string;
  name?: string;
  first_name?: string;
  role: 'admin' | 'teacher' | 'student';
  created_at: string;
  last_login?: string;
  is_active: boolean;
  tgid?: number;
  avatar_id?: number;
  student_group?: string;
  referral_clicks?: number;
  referral_registrations?: number;
  referred_by?: number;
  irfit_coin_balance?: number;
  admin_active?: boolean;
}

interface UserManagementProps {
  onBack: () => void;
  isDark: boolean;
}

const UserManagement: React.FC<UserManagementProps> = ({ onBack, isDark }) => {
  const [users, setUsers] = useState<User[]>([]);
  const [filteredUsers, setFilteredUsers] = useState<User[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [showFilters, setShowFilters] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [roleFilter, setRoleFilter] = useState<'all' | 'admin' | 'teacher' | 'student'>('all');
  const [statusFilter, setStatusFilter] = useState<'all' | 'active' | 'inactive'>('all');
  const [coinFilter, setCoinFilter] = useState<'all' | '0' | '1-100' | '100-500' | '500+'>('all');
  const [groupFilter, setGroupFilter] = useState<string>('all');
  const [avatarIdFilter, setAvatarIdFilter] = useState('');
  const [telegramIdFilter, setTelegramIdFilter] = useState('');
  const [dateFromFilter, setDateFromFilter] = useState('');
  const [dateToFilter, setDateToFilter] = useState('');
  const [showMessageModal, setShowMessageModal] = useState(false);
  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  const [messageText, setMessageText] = useState('');
  const [isSendingMessage, setIsSendingMessage] = useState(false);
  const [showUserDetails, setShowUserDetails] = useState(false);
  const [selectedUserForDetails, setSelectedUserForDetails] = useState<User | null>(null);
  const [showEditModal, setShowEditModal] = useState(false);
  const [selectedUserForEdit, setSelectedUserForEdit] = useState<User | null>(null);
  const [coinAmount, setCoinAmount] = useState('');
  const [newGroup, setNewGroup] = useState('');
  const [adminActive, setAdminActive] = useState(true);
  const [isSaving, setIsSaving] = useState(false);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —ç–∫—Ä–∞–Ω–∞
  useEffect(() => {
    fetchUsers();
  }, []);

  // –û—á–∏—â–∞–µ–º —Å–∫—Ä–æ–ª–ª –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    return () => {
      document.body.style.overflow = 'unset';
    };
  }, []);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  useEffect(() => {
    let filtered = users;

    // –ü–æ–∏—Å–∫ –ø–æ email
    if (searchTerm) {
      filtered = filtered.filter(user => 
        user.email.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª–∏
    if (roleFilter !== 'all') {
      filtered = filtered.filter(user => user.role === roleFilter);
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (statusFilter !== 'all') {
      filtered = filtered.filter(user => 
        statusFilter === 'active' ? user.is_active : !user.is_active
      );
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–æ–Ω–µ—Ç
    if (coinFilter !== 'all') {
      filtered = filtered.filter(user => {
        const balance = user.irfit_coin_balance || 0;
        switch (coinFilter) {
          case '0':
            return balance === 0;
          case '1-100':
            return balance >= 1 && balance <= 100;
          case '100-500':
            return balance > 100 && balance <= 500;
          case '500+':
            return balance > 500;
          default:
            return true;
        }
      });
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –≥—Ä—É–ø–ø–µ
    if (groupFilter !== 'all') {
      filtered = filtered.filter(user => user.student_group === groupFilter);
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ Avatar ID
    if (avatarIdFilter) {
      filtered = filtered.filter(user => 
        user.avatar_id && user.avatar_id.toString().includes(avatarIdFilter)
      );
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ Telegram ID
    if (telegramIdFilter) {
      filtered = filtered.filter(user => 
        user.tgid && user.tgid.toString().includes(telegramIdFilter)
      );
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if (dateFromFilter) {
      filtered = filtered.filter(user => 
        new Date(user.created_at) >= new Date(dateFromFilter)
      );
    }

    if (dateToFilter) {
      filtered = filtered.filter(user => 
        new Date(user.created_at) <= new Date(dateToFilter)
      );
    }

    setFilteredUsers(filtered);
  }, [users, searchTerm, roleFilter, statusFilter, coinFilter, groupFilter, avatarIdFilter, telegramIdFilter, dateFromFilter, dateToFilter]);

  const fetchUsers = async () => {
    setIsLoading(true);
    try {
      const token = localStorage.getItem('irfit_token');
      if (!token) {
        setError('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const response = await fetch('https://n8n.bitcoinlimb.com/webhook/users-take', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞:', data);
      
      if (data.success && Array.isArray(data.users)) {
        console.log('–ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', data.users[0]);
        setUsers(data.users);
      } else if (Array.isArray(data)) {
        console.log('–ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–º–∞—Å—Å–∏–≤):', data[0]);
        setUsers(data);
      } else {
        setUsers([]);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    } finally {
      setIsLoading(false);
    }
  };

  const formatDate = (dateString: string) => {
    if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    const dateOnly = dateString.split('T')[0];
    const [year, month, day] = dateString.split('-');
    return new Date(parseInt(year), parseInt(month) - 1, parseInt(day)).toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  const getRoleIcon = (role: string) => {
    switch (role) {
      case 'admin':
        return <span className="text-yellow-500 font-bold">üëë</span>;
      case 'teacher':
        return <span className="text-blue-500 font-bold">üë®‚Äçüè´</span>;
      case 'student':
        return <span className="text-green-500 font-bold">üë®‚Äçüéì</span>;
      default:
        return <span className="text-gray-500 font-bold">üë§</span>;
    }
  };

  const getRoleName = (role: string) => {
    switch (role) {
      case 'admin':
        return '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
      case 'teacher':
        return '–£—á–∏—Ç–µ–ª—å';
      case 'student':
        return '–£—á–µ–Ω–∏–∫';
      default:
        return '–£—á–µ–Ω–∏–∫';
    }
  };

  const getRoleBadgeColor = (role: string) => {
    switch (role) {
      case 'admin':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'teacher':
        return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'student':
        return 'bg-green-100 text-green-800 border-green-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const handleSendMessage = (user: User) => {
    if (!user.tgid) {
      alert('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç Telegram ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
      return;
    }
    
    setSelectedUser(user);
    setMessageText('');
    setShowMessageModal(true);
  };

  const handleViewUser = (user: User) => {
    setSelectedUserForDetails(user);
    setShowUserDetails(true);
    // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
    document.body.style.overflow = 'hidden';
  };

  const handleEditUser = (user: User) => {
    setSelectedUserForEdit(user);
    setCoinAmount('');
    setNewGroup(user.student_group || '');
    setAdminActive(user.admin_active === true); // true = –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã, false = —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
    setShowEditModal(true);
    // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
    document.body.style.overflow = 'hidden';
  };

  const handleCloseEditModal = () => {
    setShowEditModal(false);
    setSelectedUserForEdit(null);
    setCoinAmount('');
    setNewGroup('');
    setAdminActive(true);
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª
    document.body.style.overflow = 'unset';
  };

  const handleSaveUser = async () => {
    if (!selectedUserForEdit) return;

    setIsSaving(true);
    try {
      const token = localStorage.getItem('irfit_token');
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–∞
      console.log('DEBUG adminActive state:', adminActive);
      console.log('DEBUG (!adminActive):', !adminActive);
      console.log('DEBUG adminActive.toString():', adminActive.toString());
      console.log('DEBUG (!adminActive).toString():', (!adminActive).toString());
      
      const params = new URLSearchParams({
        userId: selectedUserForEdit.id.toString(),
        coinAmount: (coinAmount || 0).toString(),
        newGroup: newGroup || '',
        adminActive: adminActive.toString() // true = –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, false = —Ä–∞–∑—Ä–µ—à–µ–Ω
      });
      
      console.log('DEBUG Final URL params:', params.toString());
      console.log('DEBUG Final URL:', `https://n8n.bitcoinlimb.com/webhook-test/users-edit?${params}`);
      
      const response = await fetch(`https://n8n.bitcoinlimb.com/webhook/users-edit?${params}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.ok) {
        const updatedUser = await response.json();
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ
        setUsers(prevUsers => 
          prevUsers.map(user => 
            user.id === selectedUserForEdit.id ? { ...user, ...updatedUser[0] } : user
          )
        );
        handleCloseEditModal();
        alert('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
      } else {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
    } finally {
      setIsSaving(false);
    }
  };

  const handleCloseUserDetails = () => {
    setShowUserDetails(false);
    setSelectedUserForDetails(null);
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
    document.body.style.overflow = 'unset';
  };

  const sendMessage = async () => {
    if (!selectedUser || !messageText.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
      return;
    }

    setIsSendingMessage(true);
    
    try {
      const token = localStorage.getItem('irfit_token');
      if (!token) {
        throw new Error('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º GET –º–µ—Ç–æ–¥ —Å query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ CORS
      const params = new URLSearchParams({
        tgid: selectedUser.tgid.toString(),
        message_text: messageText.trim(),
        user_email: selectedUser.email
      });

      const response = await fetch(`https://n8n.bitcoinlimb.com/webhook/send-push?${params}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', result);
      
      alert(`–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${selectedUser.email}!`);
      setShowMessageModal(false);
      setMessageText('');
      setSelectedUser(null);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsSendingMessage(false);
    }
  };

  const handleDeleteUser = async (userId: number, userEmail: string) => {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userEmail}? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`)) {
      return;
    }

    setIsLoading(true);
    try {
      const token = localStorage.getItem('irfit_token');
      if (!token) {
        setError('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const response = await fetch('https://n8n.bitcoinlimb.com/webhook/delete-user', {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          id: userId
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      if (data.success) {
        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        setUsers(prev => prev.filter(user => user.id !== userId));
        setFilteredUsers(prev => prev.filter(user => user.id !== userId));
        alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
      } else {
        setError(data.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      setError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    } finally {
      setIsLoading(false);
    }
  };

  if (isLoading) {
    return (
      <div className={`min-h-screen ${isDark ? 'bg-gray-900 text-white' : 'bg-gray-50 text-gray-900'}`}>
        <div className="flex items-center justify-center h-screen">
          <div className="text-center">
            <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-[#94c356] mb-4"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className={`min-h-screen ${isDark ? 'bg-gray-900 text-white' : 'bg-gray-50 text-gray-900'}`}>
      {/* Header */}
      <div className={`sticky top-0 z-10 ${isDark ? 'bg-gray-800' : 'bg-white'} border-b ${isDark ? 'border-gray-700' : 'border-gray-200'}`}>
        <div className="flex items-center justify-between p-4">
          <button
            onClick={onBack}
            className={`p-2 rounded-lg ${isDark ? 'hover:bg-gray-700' : 'hover:bg-gray-100'} transition-colors`}
          >
            <ArrowLeft className="w-5 h-5" />
          </button>
          <h1 className="text-lg font-semibold">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
          </h1>
          <button
            onClick={fetchUsers}
            disabled={isLoading}
            className={`p-2 rounded-lg ${isDark ? 'hover:bg-gray-700' : 'hover:bg-gray-100'} transition-colors disabled:opacity-50`}
            title="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 01-15.357-2m15.357 2H15" />
            </svg>
          </button>
        </div>
      </div>

      {/* Content */}
      <div className="p-6 space-y-6">
        <div className="text-center mb-6">
          <div className="text-4xl mb-4">üë•</div>
          <h2 className="text-xl font-bold mb-2">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</h2>
          <p className={`text-sm ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
            –ü—Ä–æ—Å–º–æ—Ç—Ä, –ø–æ–∏—Å–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å–∏—Å—Ç–µ–º—ã
          </p>
        </div>

        {/* Error Display */}
        {error && (
          <div className={`rounded-xl p-4 ${isDark ? 'bg-red-900/20 border border-red-600/30' : 'bg-red-50 border border-red-200'} shadow-sm`}>
            <div className="flex items-start space-x-3">
              <div className="text-red-600 text-lg">‚ùå</div>
              <div>
                <h4 className="font-semibold text-red-800 mb-1">–û—à–∏–±–∫–∞</h4>
                <p className="text-sm text-red-700">{error}</p>
              </div>
            </div>
          </div>
        )}

        {/* –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫ */}
        <div className={`rounded-xl p-4 ${isDark ? 'bg-gray-800' : 'bg-white'} shadow-sm border ${isDark ? 'border-gray-700' : 'border-gray-200'}`}>
          <div className="space-y-4">
            {/* –ü–æ–∏—Å–∫ */}
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <input
                type="text"
                placeholder="–ü–æ–∏—Å–∫ –ø–æ email..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className={`w-full pl-10 pr-4 py-2 border rounded-lg focus:ring-2 focus:ring-[#94c356] focus:border-transparent transition-all ${
                  isDark ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300 text-gray-800'
                }`}
              />
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
            <button
              onClick={() => setShowFilters(!showFilters)}
              className={`flex items-center justify-center space-x-2 px-4 py-2 rounded-lg border transition-all ${
                showFilters
                  ? 'bg-[#94c356] text-white border-[#94c356]'
                  : isDark
                  ? 'bg-gray-700 border-gray-600 text-gray-300 hover:bg-gray-600'
                  : 'bg-white border-gray-300 text-gray-700 hover:bg-gray-50'
              }`}
            >
              <Filter className="w-4 h-4" />
              <span>{showFilters ? '–°–∫—Ä—ã—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã' : '–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã'}</span>
            </button>

            {/* –§–∏–ª—å—Ç—Ä—ã */}
            {showFilters && (
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
              {/* –§–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª–∏ */}
              <div>
                <label className={`block text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                  –†–æ–ª—å
                </label>
                <select
                  value={roleFilter}
                  onChange={(e) => setRoleFilter(e.target.value as any)}
                  className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-[#94c356] focus:border-transparent transition-all ${
                    isDark ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300 text-gray-800'
                  }`}
                >
                  <option value="all">–í—Å–µ —Ä–æ–ª–∏</option>
                  <option value="admin">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã</option>
                  <option value="teacher">–£—á–∏—Ç–µ–ª—è</option>
                  <option value="student">–£—á–µ–Ω–∏–∫–∏</option>
                </select>
              </div>

              {/* –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É */}
              <div>
                <label className={`block text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                  –°—Ç–∞—Ç—É—Å
                </label>
                <select
                  value={statusFilter}
                  onChange={(e) => setStatusFilter(e.target.value as any)}
                  className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-[#94c356] focus:border-transparent transition-all ${
                    isDark ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300 text-gray-800'
                  }`}
                >
                  <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                  <option value="active">–ê–∫—Ç–∏–≤–Ω—ã–µ</option>
                  <option value="inactive">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ</option>
                </select>
              </div>

              {/* –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–æ–Ω–µ—Ç */}
              <div>
                <label className={`block text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                  –ë–∞–ª–∞–Ω—Å IRFIT Coins
                </label>
                <select
                  value={coinFilter}
                  onChange={(e) => setCoinFilter(e.target.value as any)}
                  className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-[#94c356] focus:border-transparent transition-all ${
                    isDark ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300 text-gray-800'
                  }`}
                >
                  <option value="all">–í—Å–µ –±–∞–ª–∞–Ω—Å—ã</option>
                  <option value="0">0 –º–æ–Ω–µ—Ç</option>
                  <option value="1-100">1-100 –º–æ–Ω–µ—Ç</option>
                  <option value="100-500">100-500 –º–æ–Ω–µ—Ç</option>
                  <option value="500+">500+ –º–æ–Ω–µ—Ç</option>
                </select>
              </div>

              {/* –§–∏–ª—å—Ç—Ä –ø–æ –≥—Ä—É–ø–ø–µ */}
              <div>
                <label className={`block text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                  –ì—Ä—É–ø–ø–∞
                </label>
                <select
                  value={groupFilter}
                  onChange={(e) => setGroupFilter(e.target.value)}
                  className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-[#94c356] focus:border-transparent transition-all ${
                    isDark ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300 text-gray-800'
                  }`}
                >
                  <option value="all">–í—Å–µ –≥—Ä—É–ø–ø—ã</option>
                  <option value="default">–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é</option>
                  <option value="all">–í—Å–µ –≥—Ä—É–ø–ø—ã (–Ω–∞–∑–Ω–∞—á–µ–Ω–æ)</option>
                  <option value="group_1">–ì—Ä—É–ø–ø–∞ 1</option>
                  <option value="group_2">–ì—Ä—É–ø–ø–∞ 2</option>
                  <option value="group_3">–ì—Ä—É–ø–ø–∞ 3</option>
                  <option value="group_4">–ì—Ä—É–ø–ø–∞ 4</option>
                  <option value="group_5">–ì—Ä—É–ø–ø–∞ 5</option>
                  <option value="group_6">–ì—Ä—É–ø–ø–∞ 6</option>
                  <option value="group_7">–ì—Ä—É–ø–ø–∞ 7</option>
                  <option value="group_8">–ì—Ä—É–ø–ø–∞ 8</option>
                  <option value="group_9">–ì—Ä—É–ø–ø–∞ 9</option>
                  <option value="group_10">–ì—Ä—É–ø–ø–∞ 10</option>
                </select>
              </div>

              {/* –§–∏–ª—å—Ç—Ä –ø–æ Avatar ID */}
              <div>
                <label className={`block text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                  Avatar ID
                </label>
                <input
                  type="text"
                  value={avatarIdFilter}
                  onChange={(e) => setAvatarIdFilter(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ Avatar ID..."
                  className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-[#94c356] focus:border-transparent transition-all ${
                    isDark ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' : 'bg-white border-gray-300 text-gray-800 placeholder-gray-500'
                  }`}
                />
              </div>

              {/* –§–∏–ª—å—Ç—Ä –ø–æ Telegram ID */}
              <div>
                <label className={`block text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                  Telegram ID
                </label>
                <input
                  type="text"
                  value={telegramIdFilter}
                  onChange={(e) => setTelegramIdFilter(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ Telegram ID..."
                  className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-[#94c356] focus:border-transparent transition-all ${
                    isDark ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' : 'bg-white border-gray-300 text-gray-800 placeholder-gray-500'
                  }`}
                />
              </div>

              {/* –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–æ—Ç) */}
              <div>
                <label className={`block text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                  –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å
                </label>
                <input
                  type="date"
                  value={dateFromFilter}
                  onChange={(e) => setDateFromFilter(e.target.value)}
                  className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-[#94c356] focus:border-transparent transition-all ${
                    isDark ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300 text-gray-800'
                  }`}
                />
              </div>

              {/* –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–¥–æ) */}
              <div>
                <label className={`block text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                  –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ
                </label>
                <input
                  type="date"
                  value={dateToFilter}
                  onChange={(e) => setDateToFilter(e.target.value)}
                  className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-[#94c356] focus:border-transparent transition-all ${
                    isDark ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300 text-gray-800'
                  }`}
                />
              </div>
                </div>

                <div className="flex justify-center">
                  <button
                    onClick={() => {
                      setSearchTerm('');
                      setRoleFilter('all');
                      setStatusFilter('all');
                      setCoinFilter('all');
                      setGroupFilter('all');
                      setAvatarIdFilter('');
                      setTelegramIdFilter('');
                      setDateFromFilter('');
                      setDateToFilter('');
                    }}
                    className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                      isDark 
                        ? 'bg-gray-600 hover:bg-gray-500 text-white' 
                        : 'bg-gray-200 hover:bg-gray-300 text-gray-800'
                    }`}
                  >
                    –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
                  </button>
                </div>
              </div>
            )}

            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
            <div className="space-y-2 text-sm text-gray-500">
              <div className="text-center">
                <span>–ù–∞–π–¥–µ–Ω–æ: {filteredUsers.length} –∏–∑ {users.length}</span>
              </div>
              <div className="grid grid-cols-3 gap-2 text-center">
                <div className={`p-2 rounded-lg ${isDark ? 'bg-gray-700' : 'bg-gray-100'}`}>
                  <div className="font-semibold text-yellow-600">{users.filter(u => u.role === 'admin').length}</div>
                  <div className="text-xs">–ê–¥–º–∏–Ω–æ–≤</div>
                </div>
                <div className={`p-2 rounded-lg ${isDark ? 'bg-gray-700' : 'bg-gray-100'}`}>
                  <div className="font-semibold text-blue-600">{users.filter(u => u.role === 'teacher').length}</div>
                  <div className="text-xs">–£—á–∏—Ç–µ–ª–µ–π</div>
                </div>
                <div className={`p-2 rounded-lg ${isDark ? 'bg-gray-700' : 'bg-gray-100'}`}>
                  <div className="font-semibold text-green-600">{users.filter(u => u.role === 'student').length}</div>
                  <div className="text-xs">–£—á–µ–Ω–∏–∫–æ–≤</div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
        <div className="space-y-4">
          {filteredUsers.map((user) => (
            <div
              key={user.id}
              className={`rounded-xl p-4 ${isDark ? 'bg-gray-800' : 'bg-white'} shadow-sm border ${
                isDark ? 'border-gray-700' : 'border-gray-200'
              }`}
            >
              <div className="mb-3">
                <div className="flex items-center space-x-3 mb-3">
                  <div className={`w-10 h-10 rounded-full ${isDark ? 'bg-gray-700' : 'bg-gray-200'} flex items-center justify-center`}>
                    {getRoleIcon(user.role)}
                  </div>
                  <div className="flex-1 min-w-0">
                    <h3 className="font-semibold text-lg truncate">{user.email}</h3>
                    <div className="flex items-center space-x-2 text-sm text-gray-500">
                      <Mail className="w-4 h-4" />
                      <span>ID: {user.id}</span>
                    </div>
                    {user.first_name && (
                      <div className="text-sm text-gray-600 mt-1">
                        –ò–º—è: {user.first_name}
                      </div>
                    )}
                    {user.student_group && user.student_group !== 'default' && (
                      <div className="text-sm text-gray-600 mt-1">
                        –ì—Ä—É–ø–ø–∞: {user.student_group === 'all' ? '–í—Å–µ –≥—Ä—É–ø–ø—ã' : `–ì—Ä—É–ø–ø–∞ ${user.student_group.replace('group_', '')}`}
                      </div>
                    )}
                    {user.avatar_id && (
                      <div className="text-sm text-gray-600 mt-1">
                        –ê–≤–∞—Ç–∞—Ä ID: {user.avatar_id}
                      </div>
                    )}
                    <div className="text-sm text-gray-600 mt-1">
                      –ë–∞–ª–∞–Ω—Å: {user.irfit_coin_balance || 0} IRFIT Coins
                    </div>
                  </div>
                </div>
                <div className="flex flex-wrap gap-2">
                  <div className={`px-3 py-1 rounded-full text-xs font-medium border ${getRoleBadgeColor(user.role)}`}>
                    {getRoleName(user.role)}
                  </div>
                  <div className={`px-2 py-1 rounded text-xs font-medium ${
                    user.is_active 
                      ? 'bg-green-100 text-green-800' 
                      : 'bg-red-100 text-red-800'
                  }`}>
                    {user.is_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                  </div>
                </div>
              </div>

              {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <div className="space-y-2 text-sm text-gray-500 mb-3">
                <div className="flex items-center space-x-2">
                  <Calendar className="w-4 h-4" />
                  <span className="truncate">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {formatDate(user.created_at)}</span>
                </div>
                {user.last_login && (
                  <div className="flex items-center space-x-2">
                    <Calendar className="w-4 h-4" />
                    <span className="truncate">–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {formatDate(user.last_login)}</span>
                  </div>
                )}
                {user.student_group && user.student_group !== 'default' && (
                  <div className="flex items-center space-x-2">
                    <User className="w-4 h-4" />
                    <span className="truncate">–ì—Ä—É–ø–ø–∞: {user.student_group === 'all' ? '–í—Å–µ –≥—Ä—É–ø–ø—ã' : `–ì—Ä—É–ø–ø–∞ ${user.student_group.replace('group_', '')}`}</span>
                  </div>
                )}
              </div>

              {/* Telegram ID */}
              {user.tgid && (
                <div className="mb-3 p-2 bg-blue-50 rounded-lg">
                  <div className="text-xs text-blue-600 mb-1">Telegram ID:</div>
                  <div className="text-sm text-blue-800 font-mono">{user.tgid}</div>
                </div>
              )}

              {/* –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              {(user.referral_clicks || user.referral_registrations || user.referred_by) && (
                <div className="mb-3 p-3 bg-green-50 rounded-lg">
                  <div className="text-xs text-green-600 mb-2 font-medium">–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</div>
                  <div className="space-y-1 text-sm">
                    {user.referral_clicks !== undefined && (
                      <div className="flex justify-between">
                        <span className="text-green-700">–ö–ª–∏–∫–∏ –ø–æ —Å—Å—ã–ª–∫–µ:</span>
                        <span className="font-medium text-green-800">{user.referral_clicks}</span>
                      </div>
                    )}
                    {user.referral_registrations !== undefined && (
                      <div className="flex justify-between">
                        <span className="text-green-700">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</span>
                        <span className="font-medium text-green-800">{user.referral_registrations}</span>
                      </div>
                    )}
                    {user.referred_by && (
                      <div className="flex justify-between">
                        <span className="text-green-700">–ü—Ä–∏–≥–ª–∞—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID:</span>
                        <span className="font-medium text-green-800">{user.referred_by}</span>
                      </div>
                    )}
                  </div>
                </div>
              )}

              {/* –î–µ–π—Å—Ç–≤–∏—è */}
              <div className="space-y-2">
                <div className="grid grid-cols-2 gap-2">
                                  <button
                  onClick={() => handleViewUser(user)}
                  className="px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors flex items-center justify-center space-x-1 text-sm"
                  title="–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è"
                >
                  <Eye className="w-4 h-4" />
                  <span>–ü—Ä–æ—Å–º–æ—Ç—Ä</span>
                </button>
                  <button
                    onClick={() => handleSendMessage(user)}
                    disabled={!user.tgid}
                    className={`px-3 py-2 rounded-lg transition-colors flex items-center justify-center space-x-1 text-sm ${
                      user.tgid
                        ? 'bg-green-600 hover:bg-green-700 text-white'
                        : 'bg-gray-400 text-gray-200 cursor-not-allowed'
                    }`}
                    title={user.tgid ? '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' : '–ù–µ—Ç Telegram ID'}
                  >
                    <Send className="w-4 h-4" />
                    <span>–°–æ–æ–±—â–µ–Ω–∏–µ</span>
                  </button>
                </div>
                <div className="grid grid-cols-2 gap-2">
                  <button
                    onClick={() => handleEditUser(user)}
                    className="px-3 py-2 bg-yellow-600 hover:bg-yellow-700 text-white rounded-lg transition-colors flex items-center justify-center space-x-1 text-sm"
                    title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                  >
                    <Edit className="w-4 h-4" />
                    <span>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</span>
                  </button>
                  <button
                    onClick={() => handleDeleteUser(user.id, user.email)}
                    disabled={isLoading}
                    className="px-3 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors flex items-center justify-center space-x-1 text-sm disabled:opacity-50"
                    title="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                  >
                    <Trash2 className="w-4 h-4" />
                    <span>–£–¥–∞–ª–∏—Ç—å</span>
                  </button>
                </div>
              </div>
            </div>
          ))}

          {filteredUsers.length === 0 && (
            <div className={`text-center py-12 ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
              <div className="text-6xl mb-4">üë•</div>
              <p className="text-lg">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
              <p className="text-sm">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</p>
            </div>
          )}
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è */}
      {showMessageModal && selectedUser && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className={`w-full max-w-md rounded-xl shadow-lg ${isDark ? 'bg-gray-800' : 'bg-white'} p-6`}>
            <div className="flex items-center justify-between mb-4">
              <h3 className={`text-lg font-semibold ${isDark ? 'text-white' : 'text-gray-800'}`}>
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
              </h3>
              <button
                onClick={() => setShowMessageModal(false)}
                className={`p-1 rounded-lg ${isDark ? 'hover:bg-gray-700' : 'hover:bg-gray-100'}`}
              >
                <XCircle className={`w-5 h-5 ${isDark ? 'text-gray-400' : 'text-gray-500'}`} />
              </button>
            </div>
            
            <div className="mb-4">
              <div className={`p-3 rounded-lg ${isDark ? 'bg-gray-700' : 'bg-gray-100'} mb-3`}>
                <p className={`text-sm ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                  <strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> {selectedUser.email}
                </p>
                <p className={`text-sm ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                  <strong>Telegram ID:</strong> {selectedUser.tgid}
                </p>
                <p className={`text-sm ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                  <strong>–†–æ–ª—å:</strong> {getRoleName(selectedUser.role)}
                </p>
              </div>
              
              <label className={`block text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                –°–æ–æ–±—â–µ–Ω–∏–µ:
              </label>
              <textarea
                value={messageText}
                onChange={(e) => setMessageText(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏..."
                rows={4}
                className={`w-full p-3 rounded-lg border transition-colors ${
                  isDark 
                    ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400 focus:border-[#94c356]' 
                    : 'bg-white border-gray-300 text-gray-800 placeholder-gray-500 focus:border-[#94c356]'
                } focus:outline-none focus:ring-2 focus:ring-[#94c356]/20`}
              />
            </div>
            
            <div className="flex space-x-3">
              <button
                onClick={() => setShowMessageModal(false)}
                className={`flex-1 px-4 py-2 rounded-lg font-medium transition-colors ${
                  isDark 
                    ? 'bg-gray-600 hover:bg-gray-500 text-white' 
                    : 'bg-gray-200 hover:bg-gray-300 text-gray-800'
                }`}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={sendMessage}
                disabled={isSendingMessage || !messageText.trim()}
                className={`flex-1 px-4 py-2 rounded-lg font-medium transition-colors ${
                  isSendingMessage || !messageText.trim()
                    ? 'bg-gray-400 text-gray-200 cursor-not-allowed'
                    : 'bg-[#94c356] hover:bg-[#7ba045] text-white'
                }`}
              >
                {isSendingMessage ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
      {showUserDetails && selectedUserForDetails && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 flex items-start justify-center pt-4 px-4 z-50"
          style={{ 
            overflow: 'hidden',
            touchAction: 'none'
          }}
        >
          <div className={`w-full max-w-lg rounded-xl shadow-lg ${isDark ? 'bg-gray-800' : 'bg-white'} p-6 max-h-[85vh] overflow-y-auto`}>
            <div className="flex items-center justify-between mb-6">
              <h3 className={`text-xl font-semibold ${isDark ? 'text-white' : 'text-gray-800'}`}>
                –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
              </h3>
              <button
                onClick={handleCloseUserDetails}
                className={`p-2 rounded-lg ${isDark ? 'hover:bg-gray-700' : 'hover:bg-gray-100'} transition-colors`}
              >
                <XCircle className={`w-5 h-5 ${isDark ? 'text-gray-400' : 'text-gray-500'}`} />
              </button>
            </div>
            
            <div className="space-y-6">
              {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <div className={`p-4 rounded-lg ${isDark ? 'bg-gray-700' : 'bg-gray-50'}`}>
                <h4 className={`text-lg font-semibold mb-4 ${isDark ? 'text-white' : 'text-gray-800'}`}>
                  –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                </h4>
                <div className="grid grid-cols-1 gap-3">
                  <div className="flex justify-between">
                    <span className={`font-medium ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>ID:</span>
                    <span className={`${isDark ? 'text-white' : 'text-gray-800'}`}>{selectedUserForDetails.id}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className={`font-medium ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>–ò–º—è:</span>
                    <span className={`${isDark ? 'text-white' : 'text-gray-800'}`}>
                      {selectedUserForDetails.name || selectedUserForDetails.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className={`font-medium ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>Email:</span>
                    <span className={`${isDark ? 'text-white' : 'text-gray-800'} break-all`}>{selectedUserForDetails.email}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className={`font-medium ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>–†–æ–ª—å:</span>
                    <div className="flex items-center space-x-2">
                      {getRoleIcon(selectedUserForDetails.role)}
                      <span className={`${isDark ? 'text-white' : 'text-gray-800'}`}>{getRoleName(selectedUserForDetails.role)}</span>
                    </div>
                  </div>
                  <div className="flex justify-between">
                    <span className={`font-medium ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>–ì—Ä—É–ø–ø–∞:</span>
                    <span className={`${isDark ? 'text-white' : 'text-gray-800'}`}>
                      {selectedUserForDetails.student_group 
                        ? (selectedUserForDetails.student_group === 'all' ? '–í—Å–µ –≥—Ä—É–ø–ø—ã' : 
                           selectedUserForDetails.student_group === 'default' ? '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é' : 
                           `–ì—Ä—É–ø–ø–∞ ${selectedUserForDetails.student_group.replace('group_', '')}`)
                        : '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞'
                      }
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className={`font-medium ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>–ê–≤–∞—Ç–∞—Ä ID:</span>
                    <span className={`${isDark ? 'text-white' : 'text-gray-800'}`}>
                      {selectedUserForDetails.avatar_id || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className={`font-medium ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>–ë–∞–ª–∞–Ω—Å IRFIT Coins:</span>
                    <span className={`${isDark ? 'text-white' : 'text-gray-800'} font-semibold`}>
                      {selectedUserForDetails.irfit_coin_balance || 0}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className={`font-medium ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>–°—Ç–∞—Ç—É—Å:</span>
                    <div className={`px-2 py-1 rounded text-xs font-medium ${
                      selectedUserForDetails.is_active 
                        ? 'bg-green-100 text-green-800' 
                        : 'bg-red-100 text-red-800'
                    }`}>
                      {selectedUserForDetails.is_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                    </div>
                  </div>
                </div>
              </div>

              {/* Telegram –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              {selectedUserForDetails.tgid && (
                <div className={`p-4 rounded-lg ${isDark ? 'bg-gray-700' : 'bg-gray-50'}`}>
                  <h4 className={`text-lg font-semibold mb-4 ${isDark ? 'text-white' : 'text-gray-800'}`}>
                    Telegram
                  </h4>
                  <div className="grid grid-cols-1 gap-3">
                    <div className="flex justify-between">
                      <span className={`font-medium ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>Telegram ID:</span>
                      <span className={`${isDark ? 'text-white' : 'text-gray-800'} font-mono`}>{selectedUserForDetails.tgid}</span>
                    </div>
                  </div>
                </div>
              )}

              {/* –î–∞—Ç—ã */}
              <div className={`p-4 rounded-lg ${isDark ? 'bg-gray-700' : 'bg-gray-50'}`}>
                <h4 className={`text-lg font-semibold mb-4 ${isDark ? 'text-white' : 'text-gray-800'}`}>
                  –î–∞—Ç—ã
                </h4>
                <div className="grid grid-cols-1 gap-3">
                  <div className="flex justify-between">
                    <span className={`font-medium ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</span>
                    <span className={`${isDark ? 'text-white' : 'text-gray-800'}`}>{formatDate(selectedUserForDetails.created_at)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className={`font-medium ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</span>
                    <span className={`${isDark ? 'text-white' : 'text-gray-800'}`}>{formatDate(selectedUserForDetails.updated_at)}</span>
                  </div>
                  {selectedUserForDetails.last_login && (
                    <div className="flex justify-between">
                      <span className={`font-medium ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:</span>
                      <span className={`${isDark ? 'text-white' : 'text-gray-800'}`}>{formatDate(selectedUserForDetails.last_login)}</span>
                    </div>
                  )}
                </div>
              </div>

              {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <div className={`p-4 rounded-lg ${isDark ? 'bg-gray-700' : 'bg-gray-50'}`}>
                <h4 className={`text-lg font-semibold mb-4 ${isDark ? 'text-white' : 'text-gray-800'}`}>
                  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
                </h4>
                <div className="grid grid-cols-1 gap-3">
                  <div className="flex justify-between">
                    <span className={`font-medium ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>–†–µ–¥–∞–∫—Ç–æ—Ä:</span>
                    <span className={`${isDark ? 'text-white' : 'text-gray-800'}`}>
                      {selectedUserForDetails.is_editor ? '–î–∞' : '–ù–µ—Ç'}
                    </span>
                  </div>
                </div>
              </div>

              {/* –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <div className={`p-4 rounded-lg ${isDark ? 'bg-green-900/20' : 'bg-green-50'}`}>
                <h4 className={`text-lg font-semibold mb-4 ${isDark ? 'text-green-300' : 'text-green-800'}`}>
                  –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                </h4>
                <div className="grid grid-cols-1 gap-3">
                  <div className="flex justify-between">
                    <span className={`font-medium ${isDark ? 'text-green-300' : 'text-green-600'}`}>–ö–ª–∏–∫–∏ –ø–æ —Å—Å—ã–ª–∫–µ:</span>
                    <span className={`${isDark ? 'text-green-200' : 'text-green-800'} font-semibold`}>
                      {selectedUserForDetails.referral_clicks !== undefined ? selectedUserForDetails.referral_clicks : 0}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className={`font-medium ${isDark ? 'text-green-300' : 'text-green-600'}`}>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</span>
                    <span className={`${isDark ? 'text-green-200' : 'text-green-800'} font-semibold`}>
                      {selectedUserForDetails.referral_registrations !== undefined ? selectedUserForDetails.referral_registrations : 0}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className={`font-medium ${isDark ? 'text-green-300' : 'text-green-600'}`}>–ü—Ä–∏–≥–ª–∞—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID:</span>
                    <span className={`${isDark ? 'text-green-200' : 'text-green-800'} font-semibold`}>
                      {selectedUserForDetails.referred_by || '–ù–∏–∫—Ç–æ'}
                    </span>
                  </div>
                </div>
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <div className="flex space-x-3 mt-6">
              <button
                onClick={handleCloseUserDetails}
                className={`flex-1 px-4 py-2 rounded-lg font-medium transition-colors ${
                  isDark 
                    ? 'bg-gray-600 hover:bg-gray-500 text-white' 
                    : 'bg-gray-200 hover:bg-gray-300 text-gray-800'
                }`}
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
              <button
                onClick={() => {
                  handleCloseUserDetails();
                  handleSendMessage(selectedUserForDetails);
                }}
                disabled={!selectedUserForDetails.tgid}
                className={`flex-1 px-4 py-2 rounded-lg font-medium transition-colors ${
                  selectedUserForDetails.tgid
                    ? isDark 
                      ? 'bg-green-600 hover:bg-green-700 text-white' 
                      : 'bg-green-600 hover:bg-green-700 text-white'
                    : 'bg-gray-400 text-gray-200 cursor-not-allowed'
                }`}
              >
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
      {showEditModal && selectedUserForEdit && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 flex items-start justify-center pt-4 px-4 z-50"
          style={{ 
            overflow: 'hidden',
            touchAction: 'none'
          }}
        >
          <div className={`w-full max-w-lg rounded-xl shadow-lg ${isDark ? 'bg-gray-800' : 'bg-white'} p-6 max-h-[85vh] overflow-y-auto`}>
            <div className="flex items-center justify-between mb-6">
              <h3 className={`text-xl font-semibold ${isDark ? 'text-white' : 'text-gray-800'}`}>
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              </h3>
              <button
                onClick={handleCloseEditModal}
                className={`p-2 rounded-lg ${isDark ? 'hover:bg-gray-700' : 'hover:bg-gray-100'} transition-colors`}
              >
                <XCircle className={`w-5 h-5 ${isDark ? 'text-gray-400' : 'text-gray-500'}`} />
              </button>
            </div>
            
            <div className="space-y-6">
              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
              <div className={`p-4 rounded-lg ${isDark ? 'bg-gray-700' : 'bg-gray-50'}`}>
                <h4 className={`text-lg font-semibold mb-2 ${isDark ? 'text-white' : 'text-gray-800'}`}>
                  {selectedUserForEdit.email}
                </h4>
                <p className={`text-sm ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                  ID: {selectedUserForEdit.id} | –†–æ–ª—å: {getRoleName(selectedUserForEdit.role)}
                </p>
                <p className={`text-sm ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                  –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {selectedUserForEdit.irfit_coin_balance || 0} IRFIT Coins
                </p>
              </div>

              {/* –û—Ç–ø—Ä–∞–≤–∏—Ç—å IRFIT Coins */}
              <div className={`p-4 rounded-lg ${isDark ? 'bg-blue-900/20' : 'bg-blue-50'}`}>
                <h4 className={`text-lg font-semibold mb-4 ${isDark ? 'text-blue-300' : 'text-blue-800'}`}>
                  üí∞ –û—Ç–ø—Ä–∞–≤–∏—Ç—å IRFIT Coins
                </h4>
                <div className="space-y-3">
                  <div>
                    <label className={`block text-sm font-medium mb-2 ${isDark ? 'text-blue-300' : 'text-blue-700'}`}>
                      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    </label>
                    <input
                      type="number"
                      value={coinAmount}
                      onChange={(e) => setCoinAmount(e.target.value)}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç..."
                      min="0"
                      className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all ${
                        isDark ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' : 'bg-white border-gray-300 text-gray-800 placeholder-gray-500'
                      }`}
                    />
                  </div>
                  {coinAmount && (
                    <div className={`text-sm ${isDark ? 'text-blue-200' : 'text-blue-700'}`}>
                      –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {(selectedUserForEdit.irfit_coin_balance || 0) + parseInt(coinAmount || '0')} IRFIT Coins
                    </div>
                  )}
                </div>
              </div>

              {/* –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É */}
              <div className={`p-4 rounded-lg ${isDark ? 'bg-green-900/20' : 'bg-green-50'}`}>
                <h4 className={`text-lg font-semibold mb-4 ${isDark ? 'text-green-300' : 'text-green-800'}`}>
                  üë• –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É
                </h4>
                <div>
                  <label className={`block text-sm font-medium mb-2 ${isDark ? 'text-green-300' : 'text-green-700'}`}>
                    –ì—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                  </label>
                  <select
                    value={newGroup}
                    onChange={(e) => setNewGroup(e.target.value)}
                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all ${
                      isDark ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300 text-gray-800'
                    }`}
                  >
                    <option value="">–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞</option>
                    <option value="default">–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é</option>
                    <option value="all">–í—Å–µ –≥—Ä—É–ø–ø—ã</option>
                    <option value="group_1">–ì—Ä—É–ø–ø–∞ 1</option>
                    <option value="group_2">–ì—Ä—É–ø–ø–∞ 2</option>
                    <option value="group_3">–ì—Ä—É–ø–ø–∞ 3</option>
                    <option value="group_4">–ì—Ä—É–ø–ø–∞ 4</option>
                    <option value="group_5">–ì—Ä—É–ø–ø–∞ 5</option>
                    <option value="group_6">–ì—Ä—É–ø–ø–∞ 6</option>
                    <option value="group_7">–ì—Ä—É–ø–ø–∞ 7</option>
                    <option value="group_8">–ì—Ä—É–ø–ø–∞ 8</option>
                    <option value="group_9">–ì—Ä—É–ø–ø–∞ 9</option>
                    <option value="group_10">–ì—Ä—É–ø–ø–∞ 10</option>
                  </select>
                </div>
              </div>

              {/* Telegram –¥–µ–π—Å—Ç–≤–∏—è */}
              <div className={`p-4 rounded-lg ${isDark ? 'bg-orange-900/20' : 'bg-orange-50'}`}>
                <h4 className={`text-lg font-semibold mb-4 ${isDark ? 'text-orange-300' : 'text-orange-800'}`}>
                  üì± Telegram –¥–µ–π—Å—Ç–≤–∏—è
                </h4>
                <div className="space-y-3">
                  <div className="flex items-center space-x-4">
                    <button
                      type="button"
                      onClick={() => setAdminActive(false)}
                      className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                        !adminActive
                          ? 'bg-green-100 text-green-800 border-2 border-green-300'
                          : 'bg-gray-100 text-gray-600 border-2 border-gray-300 hover:bg-gray-200'
                      }`}
                    >
                      ‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω—ã
                    </button>
                    <button
                      type="button"
                      onClick={() => setAdminActive(true)}
                      className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                        adminActive
                          ? 'bg-red-100 text-red-800 border-2 border-red-300'
                          : 'bg-gray-100 text-gray-600 border-2 border-gray-300 hover:bg-gray-200'
                      }`}
                    >
                      ‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
                    </button>
                  </div>
                  <p className={`text-sm font-medium ${isDark ? 'text-orange-200' : 'text-orange-700'}`}>
                    {adminActive ? (
                      <>
                        <span className="text-red-600">‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</span>
                        <br />
                        <span className="text-xs">–ù–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤ Telegram –±–æ—Ç–µ</span>
                      </>
                    ) : (
                      <>
                        <span className="text-green-600">‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω</span>
                        <br />
                        <span className="text-xs">–ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤ Telegram –±–æ—Ç–µ</span>
                      </>
                    )}
                  </p>
                </div>
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <div className="flex space-x-3 mt-6">
              <button
                onClick={handleCloseEditModal}
                className={`flex-1 px-4 py-2 rounded-lg font-medium transition-colors ${
                  isDark 
                    ? 'bg-gray-600 hover:bg-gray-500 text-white' 
                    : 'bg-gray-200 hover:bg-gray-300 text-gray-800'
                }`}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={handleSaveUser}
                disabled={isSaving}
                className={`flex-1 px-4 py-2 rounded-lg font-medium transition-colors ${
                  isSaving || (!coinAmount && newGroup === selectedUserForEdit.student_group && adminActive === (selectedUserForEdit.admin_active !== false))
                    ? 'bg-gray-400 text-gray-200 cursor-not-allowed'
                    : 'bg-[#94c356] hover:bg-[#7ba045] text-white'
                }`}
              >
                {isSaving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default UserManagement;
